#!/bin/bash
# vim: filetype=sh
#
# build-server
#
# This script will call the ansible playbook build-server to complete a new server build
# on a host. 
#
# This depends on the ansible-agent being running and the env vars available 
# the agent file
#
# Created by: clake
# Created on: 06/12/2024
#

###
### Variables
###
# operational variables
show_arg=""
ansible_extra_vars=""
host=""
json_arg=
IFS='' read -r -d '' usage <<"EOF"

build-server: Ensure all standard packages are installed on SCI hosts

Usage: 
  build-server [ -h|--help ]
  build-server [ -j|--json ] [ -N|-noreboot ] [ -s|--show ] 
               [ -S|--selfadmin ] <host>
  
Arguments: 
  -h|--help        Show what you are seeing right now
  -j|--json        Output in JSON format
  -N|--noreboot    Do not reboot the host after the build completes
  -s|--show        Display the ansible command only
  -S|--selfadmin   Build a self-administered host (no NIS or NFS) 

EOF



###
### Process Args
###
while [[ $# -gt 0 ]]; do
   case $1 in
       -h|--help)      
           echo "$usage" && exit 0
           ;;
       -j|--json)      
           json_arg=1
           ;;
       -N|--noreboot)      
           ansible_extra_vars="skip_reboot=true ${ansible_extra_vars}"
           ;;
       -s|--show)      
           show_arg="yes"
           ;;
       -S|--selfadmin)      
           ansible_extra_vars="selfadmin=true ${ansible_extra_vars}"
           ;;
       -*)             
           echo "ERROR: unknown option $1" && exit 1
           ;;
       *)              
           if [[ -z "$host" ]]; then 
              host="$1"
           else
              echo "ERROR: superfluous option $1" && exit 1
           fi
           ;;
   esac
   shift
done
# Clean up extra vars if necessary 
if [ ! -z "${ansible_extra_vars}" ]; then
   ansible_extra_vars=$( echo ${ansible_extra_vars} | awk '{$1=$1;print}' )
   ansible_extra_vars="--extra-vars \"${ansible_extra_vars}\""
fi
# We require one and only one arg
if [[ -z "$host" ]]; then
   echo >&2 "ERROR: no host specified"
   exit 1
fi



###
### Needs to be run as root
###
if [[ ${EUID} -ne 0 ]]; then
   echo "ERROR: insufficient privileges (try sudo)"
   exit 2
fi



###
### Are you sure? 
###
# only do this if we are not showing
if [[ -z "${show_arg}" ]]; then
   echo -n "This action will run all system build tasks on ${host}"
   if [[ ${ansible_extra_vars} =~ "reboot" ]]; then
      echo "."
   else
      echo ", which includes a reboot."
   fi
   read -p "Are you sure? " -n 1 -r
   echo    
   [[ ! $REPLY =~ ^[Yy]$ ]] && exit 0
fi



###
### Load the Ansible agent info
###
AGENTVARS=$( /sci-it/ansible/bin/ansible-agent -i )
if [ $? -ne 0 ]; then
   echo >&2 "ERROR: unable to contact the Ansible agent."
   exit 1
fi
eval ${AGENTVARS}



###
### Run the ansible command to configure the box
###
exec_command=$( echo "/usr/bin/ansible-playbook --limit ${host} ${ansible_extra_vars} /home/sci/lbigler/ansible-dev/playbooks/mint-bypass-site" | sed 's/ \+/ /g' )
[ ! -z "${json_arg}" ] && exec_command=$( echo "ANSIBLE_STDOUT_CALLBACK=ansible.posix.json $exec_command" )
# Show or run the command
if [ ! -z "${show_arg}" ]; then
   echo "${exec_command}"
else
   eval ${exec_command} || exit $?
fi
# update all packages 
exec_command=$( echo "/usr/bin/ansible-playbook --limit ${host} ${ansible_extra_vars} /home/sci/lbigler/ansible-dev/playbooks/update-packages.yaml" | sed 's/ \+/ /g' )
[ ! -z "${json_arg}" ] && exec_command=$( echo "ANSIBLE_STDOUT_CALLBACK=ansible.posix.json $exec_command" )
# Show or run the command
if [ ! -z "${show_arg}" ]; then
   echo "${exec_command}"
else
   eval ${exec_command} || exit $?
fi
# Reboot the box
exec_command="/usr/bin/ansible ${host} -m ansible.builtin.reboot -a 'pre_reboot_delay=2 reboot_timeout=900 msg=\"Rebooting due to build-server\"'"
# Show or run the command
if [ ! -z "${show_arg}" ]; then
   echo "${exec_command}"
else
   echo "Rebooting ${host}..."
   eval ${exec_command}
fi

